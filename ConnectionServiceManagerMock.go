// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/goConnectionManager (interfaces: IService)

// Package goConnectionManager is a generated GoMock package.
package goConnectionManager

import (
	context "context"
	reflect "reflect"

	model "github.com/bhbosman/gocommon/model"
	IFxService "github.com/bhbosman/gocommon/services/IFxService"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// CloseAllConnections mocks base method.
func (m *MockIService) CloseAllConnections(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAllConnections", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAllConnections indicates an expected call of CloseAllConnections.
func (mr *MockIServiceMockRecorder) CloseAllConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAllConnections", reflect.TypeOf((*MockIService)(nil).CloseAllConnections), arg0)
}

// CloseConnection mocks base method.
func (m *MockIService) CloseConnection(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockIServiceMockRecorder) CloseConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockIService)(nil).CloseConnection), arg0)
}

// ConnectionInformationReceived mocks base method.
func (m *MockIService) ConnectionInformationReceived(arg0 *model.PublishRxHandlerCounters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionInformationReceived", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectionInformationReceived indicates an expected call of ConnectionInformationReceived.
func (mr *MockIServiceMockRecorder) ConnectionInformationReceived(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionInformationReceived", reflect.TypeOf((*MockIService)(nil).ConnectionInformationReceived), arg0)
}

// DeregisterConnection mocks base method.
func (m *MockIService) DeregisterConnection(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterConnection indicates an expected call of DeregisterConnection.
func (mr *MockIServiceMockRecorder) DeregisterConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterConnection", reflect.TypeOf((*MockIService)(nil).DeregisterConnection), arg0)
}

// GetConnections mocks base method.
func (m *MockIService) GetConnections(arg0 context.Context) ([]*model.ConnectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnections", arg0)
	ret0, _ := ret[0].([]*model.ConnectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnections indicates an expected call of GetConnections.
func (mr *MockIServiceMockRecorder) GetConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnections", reflect.TypeOf((*MockIService)(nil).GetConnections), arg0)
}

// NameConnection mocks base method.
func (m *MockIService) NameConnection(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameConnection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NameConnection indicates an expected call of NameConnection.
func (mr *MockIServiceMockRecorder) NameConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameConnection", reflect.TypeOf((*MockIService)(nil).NameConnection), arg0, arg1)
}

// OnStart mocks base method.
func (m *MockIService) OnStart(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStart indicates an expected call of OnStart.
func (mr *MockIServiceMockRecorder) OnStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockIService)(nil).OnStart), arg0)
}

// OnStop mocks base method.
func (m *MockIService) OnStop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStop indicates an expected call of OnStop.
func (mr *MockIServiceMockRecorder) OnStop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStop", reflect.TypeOf((*MockIService)(nil).OnStop), arg0)
}

// RegisterConnection mocks base method.
func (m *MockIService) RegisterConnection(arg0 string, arg1 context.CancelFunc, arg2 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterConnection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterConnection indicates an expected call of RegisterConnection.
func (mr *MockIServiceMockRecorder) RegisterConnection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConnection", reflect.TypeOf((*MockIService)(nil).RegisterConnection), arg0, arg1, arg2)
}

// ServiceName mocks base method.
func (m *MockIService) ServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockIServiceMockRecorder) ServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockIService)(nil).ServiceName))
}

// State mocks base method.
func (m *MockIService) State() IFxService.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(IFxService.State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockIServiceMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockIService)(nil).State))
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [context.Context]
// argString: arg0 context.Context
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIServiceMockRecorder) OnCloseAllConnectionsDoAndReturn(
	arg0 interface{},
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		CloseAllConnections(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnCloseAllConnectionsDo(
	arg0 interface{},
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		CloseAllConnections(arg0).
		Do(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnCloseAllConnectionsDoAndReturnDefault(
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		CloseAllConnections(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnCloseAllConnectionsDoDefault(
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		CloseAllConnections(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIServiceMockRecorder) OnCloseAllConnectionsReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		CloseAllConnections(arg0).
		Return(ret0)
}

// 1
func (mr *MockIServiceMockRecorder) OnCloseAllConnectionsReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		CloseAllConnections(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [string]
// argString: arg0 string
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIServiceMockRecorder) OnCloseConnectionDoAndReturn(
	arg0 interface{},
	f func(arg0 string) error) *gomock.Call {
	return mr.
		CloseConnection(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnCloseConnectionDo(
	arg0 interface{},
	f func(arg0 string)) *gomock.Call {
	return mr.
		CloseConnection(arg0).
		Do(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnCloseConnectionDoAndReturnDefault(
	f func(arg0 string) error) *gomock.Call {
	return mr.
		CloseConnection(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnCloseConnectionDoDefault(
	f func(arg0 string)) *gomock.Call {
	return mr.
		CloseConnection(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIServiceMockRecorder) OnCloseConnectionReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		CloseConnection(arg0).
		Return(ret0)
}

// 1
func (mr *MockIServiceMockRecorder) OnCloseConnectionReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		CloseConnection(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [*model.PublishRxHandlerCounters]
// argString: arg0 *model.PublishRxHandlerCounters
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIServiceMockRecorder) OnConnectionInformationReceivedDoAndReturn(
	arg0 interface{},
	f func(arg0 *model.PublishRxHandlerCounters) error) *gomock.Call {
	return mr.
		ConnectionInformationReceived(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnConnectionInformationReceivedDo(
	arg0 interface{},
	f func(arg0 *model.PublishRxHandlerCounters)) *gomock.Call {
	return mr.
		ConnectionInformationReceived(arg0).
		Do(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnConnectionInformationReceivedDoAndReturnDefault(
	f func(arg0 *model.PublishRxHandlerCounters) error) *gomock.Call {
	return mr.
		ConnectionInformationReceived(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnConnectionInformationReceivedDoDefault(
	f func(arg0 *model.PublishRxHandlerCounters)) *gomock.Call {
	return mr.
		ConnectionInformationReceived(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIServiceMockRecorder) OnConnectionInformationReceivedReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		ConnectionInformationReceived(arg0).
		Return(ret0)
}

// 1
func (mr *MockIServiceMockRecorder) OnConnectionInformationReceivedReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		ConnectionInformationReceived(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [string]
// argString: arg0 string
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIServiceMockRecorder) OnDeregisterConnectionDoAndReturn(
	arg0 interface{},
	f func(arg0 string) error) *gomock.Call {
	return mr.
		DeregisterConnection(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnDeregisterConnectionDo(
	arg0 interface{},
	f func(arg0 string)) *gomock.Call {
	return mr.
		DeregisterConnection(arg0).
		Do(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnDeregisterConnectionDoAndReturnDefault(
	f func(arg0 string) error) *gomock.Call {
	return mr.
		DeregisterConnection(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnDeregisterConnectionDoDefault(
	f func(arg0 string)) *gomock.Call {
	return mr.
		DeregisterConnection(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIServiceMockRecorder) OnDeregisterConnectionReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		DeregisterConnection(arg0).
		Return(ret0)
}

// 1
func (mr *MockIServiceMockRecorder) OnDeregisterConnectionReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		DeregisterConnection(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [context.Context]
// argString: arg0 context.Context
// rets: [[]*model.ConnectionInformation error]
// retString: []*model.ConnectionInformation, error
// retString:  ([]*model.ConnectionInformation, error)
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIServiceMockRecorder) OnGetConnectionsDoAndReturn(
	arg0 interface{},
	f func(arg0 context.Context) ([]*model.ConnectionInformation, error)) *gomock.Call {
	return mr.
		GetConnections(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnGetConnectionsDo(
	arg0 interface{},
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		GetConnections(arg0).
		Do(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnGetConnectionsDoAndReturnDefault(
	f func(arg0 context.Context) ([]*model.ConnectionInformation, error)) *gomock.Call {
	return mr.
		GetConnections(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnGetConnectionsDoDefault(
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		GetConnections(gomock.Any()).
		Do(f)
}

// retNames: [ret0 ret1]
// retArgs: [ret0 []*model.ConnectionInformation ret1 error]
// retArgs22: ret0 []*model.ConnectionInformation,ret1 error
// 1
func (mr *MockIServiceMockRecorder) OnGetConnectionsReturn(
	arg0 interface{},
	ret0 []*model.ConnectionInformation, ret1 error) *gomock.Call {
	return mr.
		GetConnections(arg0).
		Return(ret0, ret1)
}

// 1
func (mr *MockIServiceMockRecorder) OnGetConnectionsReturnDefault(
	ret0 []*model.ConnectionInformation, ret1 error) *gomock.Call {
	return mr.
		GetConnections(gomock.Any()).
		Return(ret0, ret1)
}

// argNames: [arg0 arg1]
// defaultArgs: [gomock.Any() gomock.Any()]
// defaultArgsAsString: gomock.Any(),gomock.Any()
// argTypes: [string string]
// argString: arg0, arg1 string
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{} arg1:{}]
// idRecv: mr
// 1
func (mr *MockIServiceMockRecorder) OnNameConnectionDoAndReturn(
	arg0, arg1 interface{},
	f func(arg0, arg1 string) error) *gomock.Call {
	return mr.
		NameConnection(arg0, arg1).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnNameConnectionDo(
	arg0, arg1 interface{},
	f func(arg0, arg1 string)) *gomock.Call {
	return mr.
		NameConnection(arg0, arg1).
		Do(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnNameConnectionDoAndReturnDefault(
	f func(arg0, arg1 string) error) *gomock.Call {
	return mr.
		NameConnection(gomock.Any(), gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnNameConnectionDoDefault(
	f func(arg0, arg1 string)) *gomock.Call {
	return mr.
		NameConnection(gomock.Any(), gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIServiceMockRecorder) OnNameConnectionReturn(
	arg0, arg1 interface{},
	ret0 error) *gomock.Call {
	return mr.
		NameConnection(arg0, arg1).
		Return(ret0)
}

// 1
func (mr *MockIServiceMockRecorder) OnNameConnectionReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		NameConnection(gomock.Any(), gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [context.Context]
// argString: arg0 context.Context
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIServiceMockRecorder) OnOnStartDoAndReturn(
	arg0 interface{},
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		OnStart(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnOnStartDo(
	arg0 interface{},
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		OnStart(arg0).
		Do(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnOnStartDoAndReturnDefault(
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		OnStart(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnOnStartDoDefault(
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		OnStart(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIServiceMockRecorder) OnOnStartReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		OnStart(arg0).
		Return(ret0)
}

// 1
func (mr *MockIServiceMockRecorder) OnOnStartReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		OnStart(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [context.Context]
// argString: arg0 context.Context
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockIServiceMockRecorder) OnOnStopDoAndReturn(
	arg0 interface{},
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		OnStop(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnOnStopDo(
	arg0 interface{},
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		OnStop(arg0).
		Do(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnOnStopDoAndReturnDefault(
	f func(arg0 context.Context) error) *gomock.Call {
	return mr.
		OnStop(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnOnStopDoDefault(
	f func(arg0 context.Context)) *gomock.Call {
	return mr.
		OnStop(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIServiceMockRecorder) OnOnStopReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		OnStop(arg0).
		Return(ret0)
}

// 1
func (mr *MockIServiceMockRecorder) OnOnStopReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		OnStop(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0 arg1 arg2]
// defaultArgs: [gomock.Any() gomock.Any() gomock.Any()]
// defaultArgsAsString: gomock.Any(),gomock.Any(),gomock.Any()
// argTypes: [string context.CancelFunc context.Context]
// argString: arg0 string, arg1 context.CancelFunc, arg2 context.Context
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{} arg1:{} arg2:{}]
// idRecv: mr
// 1
func (mr *MockIServiceMockRecorder) OnRegisterConnectionDoAndReturn(
	arg0, arg1, arg2 interface{},
	f func(arg0 string, arg1 context.CancelFunc, arg2 context.Context) error) *gomock.Call {
	return mr.
		RegisterConnection(arg0, arg1, arg2).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnRegisterConnectionDo(
	arg0, arg1, arg2 interface{},
	f func(arg0 string, arg1 context.CancelFunc, arg2 context.Context)) *gomock.Call {
	return mr.
		RegisterConnection(arg0, arg1, arg2).
		Do(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnRegisterConnectionDoAndReturnDefault(
	f func(arg0 string, arg1 context.CancelFunc, arg2 context.Context) error) *gomock.Call {
	return mr.
		RegisterConnection(gomock.Any(), gomock.Any(), gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIServiceMockRecorder) OnRegisterConnectionDoDefault(
	f func(arg0 string, arg1 context.CancelFunc, arg2 context.Context)) *gomock.Call {
	return mr.
		RegisterConnection(gomock.Any(), gomock.Any(), gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIServiceMockRecorder) OnRegisterConnectionReturn(
	arg0, arg1, arg2 interface{},
	ret0 error) *gomock.Call {
	return mr.
		RegisterConnection(arg0, arg1, arg2).
		Return(ret0)
}

// 1
func (mr *MockIServiceMockRecorder) OnRegisterConnectionReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		RegisterConnection(gomock.Any(), gomock.Any(), gomock.Any()).
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [string]
// retString: string
// retString:  string
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIServiceMockRecorder) OnServiceNameDoAndReturn(
	f func() string) *gomock.Call {
	return mr.
		ServiceName().
		DoAndReturn(f)
}

// 0
func (mr *MockIServiceMockRecorder) OnServiceNameDo(
	f func()) *gomock.Call {
	return mr.
		ServiceName().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 string]
// retArgs22: ret0 string
// 1
func (mr *MockIServiceMockRecorder) OnServiceNameReturn(ret0 string) *gomock.Call {
	return mr.
		ServiceName().
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [IFxService.State]
// retString: IFxService.State
// retString:  IFxService.State
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIServiceMockRecorder) OnStateDoAndReturn(
	f func() IFxService.State) *gomock.Call {
	return mr.
		State().
		DoAndReturn(f)
}

// 0
func (mr *MockIServiceMockRecorder) OnStateDo(
	f func()) *gomock.Call {
	return mr.
		State().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 IFxService.State]
// retArgs22: ret0 IFxService.State
// 1
func (mr *MockIServiceMockRecorder) OnStateReturn(ret0 IFxService.State) *gomock.Call {
	return mr.
		State().
		Return(ret0)
}
